# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rg5qa32GNltef-tyxDfgYtNH2bdAzp6h
"""

pip install openai-whisper transformers torchaudio gradio

!apt-get update && apt-get install -y ffmpeg

!pip install -U openai-whisper transformers gradio
!apt install ffmpeg

import whisper
from transformers import pipeline
import gradio as gr

# Load Whisper model for speech-to-text
print("Loading Whisper model...")
whisper_model = whisper.load_model("base")

# Load Hugging Face hate speech classifier
print("Loading BERT hate speech classifier...")
text_classifier = pipeline("text-classification", model="unitary/toxic-bert")

# Function: Transcribe audio and detect hate speech
def detect_hate_speech(audio_path):
    try:
        # Step 1: Transcribe the audio
        result = whisper_model.transcribe(audio_path)
        transcribed_text = result["text"]

        # Step 2: Classify the transcribed text
        prediction = text_classifier(transcribed_text)[0]
        label = prediction['label']
        score = prediction['score']

        # Output
        return {
            "Transcribed Text": transcribed_text,
            "Prediction": label,
            "Confidence": f"{score*100:.2f}%"
        }
    except Exception as e:
        return {
            "Error": str(e)
        }

# Gradio UI
iface = gr.Interface(
    fn=detect_hate_speech,
    inputs=gr.Audio(type="filepath"),
    outputs=[
        gr.Textbox(label="Transcribed Text"),
        gr.Textbox(label="Prediction"),
        gr.Textbox(label="Confidence")
    ],
    title="üéôÔ∏è Hate Speech Detection from Audio",
    description="Upload or record an audio file. The system will transcribe it and classify if it's hate speech using BERT."
)

# Launch the interface
iface.launch()







!pip install -U openai-whisper transformers gradio
!apt install ffmpeg

import whisper
from transformers import pipeline
import gradio as gr
import os

# Load Whisper and BERT
whisper_model = whisper.load_model("base")
text_classifier = pipeline("text-classification", model="unitary/toxic-bert")

def detect_hate_speech(audio):
    try:
        if audio is None:
            return "No audio provided.", "Error", "Error"

        # audio is a tuple: (sample_rate, numpy_array)
        import tempfile
        import soundfile as sf

        # Save to temporary WAV file
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp:
            sf.write(tmp.name, audio[1], audio[0])
            audio_path = tmp.name

        # Transcribe
        result = whisper_model.transcribe(audio_path)
        transcribed_text = result["text"]

        # Classify
        prediction = text_classifier(transcribed_text)[0]
        label = prediction['label']
        score = prediction['score']

        return transcribed_text, label, f"{score*100:.2f}%"
    except Exception as e:
        return str(e), "Error", "Error"

iface = gr.Interface(
    fn=detect_hate_speech,
    inputs=gr.Audio(label="Upload or Record Audio", format="wav"),
    outputs=[
        gr.Textbox(label="Transcribed Text"),
        gr.Textbox(label="Prediction"),
        gr.Textbox(label="Confidence")
    ],
    title="üéôÔ∏è Hate Speech Detection from Audio",
    description="Upload or record audio. Transcribes with Whisper and classifies with BERT."
)

iface.launch(debug=True)













!pip install -q gradio transformers git+https://github.com/openai/whisper.git
!sudo apt install ffmpeg

import whisper
from transformers import pipeline
import gradio as gr

# Load Whisper model for speech-to-text
print("Loading Whisper model...")
whisper_model = whisper.load_model("base")

# Load Hate Speech / Offensive / Normal classifier
print("Loading hate speech classifier...")
classifier = pipeline("text-classification", model="Hate-speech-CNERG/dehatebert-mono-english", truncation=True)

# Function: Transcribe audio and classify speech
def detect_hate_speech(audio_path):
    try:
        # Step 1: Transcribe the audio
        result = whisper_model.transcribe(audio_path)
        transcribed_text = result["text"]

        # Step 2: Classify the transcribed text
        prediction = classifier(transcribed_text)[0]
        label = prediction['label']
        score = prediction['score']

        # Output
        return transcribed_text, label, f"{score*100:.2f}%"

    except Exception as e:
        return "Error", str(e), ""

# Gradio UI
iface = gr.Interface(
    fn=detect_hate_speech,
    inputs=gr.Audio(type="filepath", label="Upload Audio (WAV recommended)"),
    outputs=[
        gr.Textbox(label="Transcribed Text"),
        gr.Textbox(label="Predicted Label"),
        gr.Textbox(label="Confidence")
    ],
    title="üéôÔ∏è Hate Speech / Offensive / Non-Hate Audio Classifier",
    description="Upload or record audio. The system will transcribe it and classify it into Hate Speech, Offensive Speech, or Non-Hate Speech."
)

iface.launch(debug=True)

